<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[光希動漫格]]></title>
  <link href="http://kimo6416337.github.io/atom.xml" rel="self"/>
  <link href="http://kimo6416337.github.io/"/>
  <updated>2013-11-25T22:44:11+08:00</updated>
  <id>http://kimo6416337.github.io/</id>
  <author>
    <name><![CDATA[傲月光希]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fancybox的特效]]></title>
    <link href="http://kimo6416337.github.io/blog/2013-11-14/fancyboxde-tu-pian-te-xiao/"/>
    <updated>2013-11-14T22:45:00+08:00</updated>
    <id>http://kimo6416337.github.io/blog/2013-11-14/fancyboxde-tu-pian-te-xiao</id>
    <content type="html"><![CDATA[<p>點開下面兩張圖片會有彈出效果
<a href="http://kimo6416337.github.io/images/123.jpg" class="fancybox" title="萌萌雙子 "><img src="http://kimo6416337.github.io/images/123.jpg"  alt="萌萌雙子 " /></a>
<a href="http://kimo6416337.github.io/images/heroBack.jpg" class="fancybox" title="Madoka&Homu "><img src="http://kimo6416337.github.io/images/heroBack.jpg"  alt="Madoka&Homu " /></a>
點下面會彈出youtube播放視窗</p>

<div class="video"><a class="various fancybox.iframe" href="http://www.youtube.com/embed/A0TuC2oe8sg?autoplay=0"><div class="video_player"></div><img src="https://i1.ytimg.com/vi/A0TuC2oe8sg/hqdefault.jpg"></a></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[某島看到的「雅量」改編複製文]]></title>
    <link href="http://kimo6416337.github.io/blog/2013-11-04/mou-dao-kan-dao-de-ya-liang-gai-bian-fu-zhi-wen/"/>
    <updated>2013-11-04T00:35:00+08:00</updated>
    <id>http://kimo6416337.github.io/blog/2013-11-04/mou-dao-kan-dao-de-ya-liang-gai-bian-fu-zhi-wen</id>
    <content type="html"><![CDATA[<p>No.121734想到了一個證明，是說99=100，當他拿給我們看時，一位對數學十分感興趣的同學說：</p>

<p>「啊，這個人好像白痴似的。」</p>

<p>「我看他倒有點像智障。」我說</p>

<p>「真像一個低能兒。」一位外號叫「柯西序列」的大食客緊接著說。</p>

<!-- more -->


<p>我們不禁哄堂大笑，同樣的一個白痴證明，每個人卻有不同的感覺。No.121734連忙把數學課本丟掉，他覺得100/1就是1，不是100，也不是99+1，更不是99.9999&hellip;。</p>

<p>人人的智力不盡相同，那是和個人的遺傳與學習環境有關。</p>

<p>如果經常上流言終結的話，便會發現很少有一個白痴沒有說過0.9999&hellip;≠1；換句話說，就算再簡單不過的數學概念，都有人搞不懂。一位小學的數學老師曾指著班裡的學生說：「無論怎麼跟他們解釋，還是有人不懂，所以我真的教得快要哭了。」</p>

<p>就以0.9999&hellip;來說，又何嘗不是如此？也許我們知道0.9999&hellip;只是1的另一種寫法，但是在一些低能兒心目中，往往認為0.9999&hellip;永遠跟1相差那麼一點。</p>

<p>世上總有些人天生缺根筋，每個人的智力或頭腦不同，並沒有什麼關係，重要的是人與人之間，應該有容忍低能兒和尊重對方白痴看法與觀點的雅量。</p>

<p>如果他連1 = 3 x 1/3 = 0.3333&hellip; x 3 = 0.9999&hellip;都不能理解，你又何必要搬出等比級數來證明呢？你學你的數學，他耍他的白痴，彼此都會有等量的快樂和感受。人與人偶有磨擦，往往都是由於缺乏那份雅量的緣故；因此，為了減少摩擦，增進和諧，我們必須努力培養雅量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多載(overloading)、重載(overriding)、多型(polymorphism)]]></title>
    <link href="http://kimo6416337.github.io/blog/2013-11-04/duo-zai-overloading-zhong-zai-overriding-duo-xing-polymorphism/"/>
    <updated>2013-11-04T00:15:00+08:00</updated>
    <id>http://kimo6416337.github.io/blog/2013-11-04/duo-zai-overloading-zhong-zai-overriding-duo-xing-polymorphism</id>
    <content type="html"><![CDATA[<ol>
<li><strong>一、多載(overloading)</strong><br/>
一個類別(class)中具有複數個相同名稱的函數(method)時，利用下列兩種方式判斷函數呼叫該載入哪個函數：<br/>
　　1.參數(argument)的型態(type)不同<br/>
　　例：<br/>
　　　　function foo(char c){code statements;}<br/>
　　　　function foo(int num){code statements;}<br/>
　　2.參數載入數量不同(包含0個)<br/>
　　例：<br/>
　　　　function foo(int a){code statements;}<br/>
　　　　function foo(int a,int b){code statements;}</li>
</ol>


<!-- more -->


<ol>
<li><strong>二、重載(overriding)</strong><br/>
用於類別的繼承(inheritance)上。當父類別與子類別具有相同名稱的函數時，則被宣告為子類別之物件(object)呼叫該函數會執行子類別中的函數，而非父類別中的函數。<br/>
　　例：<br/>
　　　　class A {<br/>
　　　　　function foo() {print &ldquo;I am in class A.&rdquo;;}<br/>
　　　　}<br/>
　　　　class B inherit A {  //B繼承A，A為父類別，B為子類別<br/>
　　　　　function foo() {print &ldquo;I am in class B.&rdquo;;}<br/>
　　　　}<br/>
　　　　B b=new B();  //b被宣告為B類別之物件<br/>
　　　　b.foo;  //output:I am in class B.</li>
<li><strong>三、多型(polymorphism)</strong><br/>
用於類別的繼承上。在父類別與子類別有共同名稱的函數情況下(也就產生了函數重載)，若呼叫相同名稱的函數時，則函數的行為會依照宣告類別之不同而產生不同結果。<br/>
　　例：<br/>
　　　　class A {<br/>
　　　　　function foo(){}<br/>
　　　　class B inherit A {<br/>
　　　　　function foo() {print &ldquo;This is foo in class B.&rdquo;;}<br/>
　　　　}<br/>
　　　　class C inherit A {<br/>
　　　　　function foo() {print &ldquo;This is foo in class C.&rdquo;;}<br/>
　　　　}<br/>
　　　　A var1=new A();  //output:This is foo in class B.<br/>
　　　　B var2=new B();  //output:This is foo in class C.</li>
</ol>

]]></content>
  </entry>
  
</feed>
